#!/usr/bin/env bash
set -euo pipefail

# ==========================================================
# üî• Script: destroy_scenario.sh
# üß© Ubicaci√≥n: /scenario/
# üß® Destruye todos los recursos Terraform generados en /tf_out/
# ==========================================================
# Autor: Younes Assouyat
# ======================================================
# Uso:
#   bash destroy_scenario.sh 2>&1 | tee log_destroy_scenario.log
# ======================================================

# Directorio base del script actual
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TF_DIR="${SCRIPT_DIR}/../tf_out"
SCENARIO_FILE="${SCRIPT_DIR}/scenario_file.json"

echo "==============================================="
echo "üß® Iniciando destrucci√≥n del escenario Terraform"
echo "üìÅ Directorio esperado: $TF_DIR"
echo "==============================================="

# ----------------------------------------------------------
# üß≠ Comprobaci√≥n de existencia del directorio tf_out
# ----------------------------------------------------------
if [ ! -d "$TF_DIR" ]; then
  echo "‚ö†Ô∏è  No se encontr√≥ el directorio tf_out."
  echo "‚û°Ô∏è  No hay recursos Terraform que destruir. Saliendo sin error."
else
  # ----------------------------------------------------------
  # üìÇ Entrar en el directorio tf_out
  # ----------------------------------------------------------
  cd "$TF_DIR" || {
    echo "‚ö†Ô∏è  No se pudo acceder al directorio tf_out."
    echo "‚û°Ô∏è  Saliendo sin error."
    exit 0
  }

  # ----------------------------------------------------------
  # ‚öôÔ∏è Inicializar Terraform si es necesario
  # ----------------------------------------------------------
  if [ ! -d ".terraform" ]; then
    echo "‚öôÔ∏è  Ejecutando 'terraform init'..."
    terraform init -input=false
  fi

  # ----------------------------------------------------------
  # üöÄ Ejecutar 'terraform destroy' y capturar el resultado
  # ----------------------------------------------------------
  echo "üöÄ Ejecutando 'terraform destroy'..."
  if terraform destroy -auto-approve -parallelism=4; then
    echo "‚úÖ Recursos Terraform destruidos correctamente."

    # ------------------------------------------------------
    # üßπ Limpieza de archivos temporales y directorio completo
    # ------------------------------------------------------
    echo "üßπ Eliminando archivos temporales..."
    rm -rf .terraform terraform.tfstate terraform.tfstate.backup terraform.lock.hcl terraform_outputs.json

    echo "üóëÔ∏è  Eliminando carpeta tf_out completa..."
    cd ..
    rm -rf "$TF_DIR"
    echo "‚ú® Carpeta tf_out eliminada con √©xito. Entorno restaurado."
  else
    echo "‚ö†Ô∏è  Error: Terraform destroy no se complet√≥ correctamente."
    echo "‚ùå La carpeta tf_out se conserva para revisi√≥n manual."
    exit 1
  fi
fi

# ----------------------------------------------------------
# üßæ Verificar y eliminar scenario_file.json
# ----------------------------------------------------------
echo "-----------------------------------------------"
echo "üßæ Verificando archivo de escenario..."
if [ -f "$SCENARIO_FILE" ]; then
  echo "üóëÔ∏è  Eliminando archivo de escenario: $SCENARIO_FILE"
  rm -f "$SCENARIO_FILE"
  echo "‚úÖ Archivo scenario_file.json eliminado correctamente."
else
  echo "‚ö†Ô∏è  No se encontr√≥ el archivo scenario_file.json."
fi

echo "==============================================="
echo "‚úÖ Proceso de destrucci√≥n completado."
echo "==============================================="
